name: redis
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'redis version'
        required: true
        default: ''
      install:
        description: 'redis install dir'
        required: false
        default: '/opt/local/redis'
      temporary:
        description: 'temporary build system version'
        required: false
        default: ''
        type: choice
        options:
          - 'false'
          - '16.04'
          - '18.04'
          - '20.04'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needbuild: ${{ steps.checktag.outputs.needbuild }}

    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Check tag
        id: checktag
        run: bash script/checktag.sh ${{secrets.GIT_TOKEN}} redis_${{github.event.inputs.version}}

  build_amd64:
    needs: [check]
    if: ${{ github.event.inputs.temporary != 'false' || needs.check.outputs.needbuild == 0 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [16.04, 18.04, 20.04]

    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build with ubuntu_${{matrix.os}}
        id: build
        timeout-minutes: 20
        run: |
          docker run -v ${PWD}:/app --workdir /app --platform "linux/amd64" ubuntu:${{matrix.os}} \
            bash /app/script/redis.sh \
                ${{github.event.inputs.version}} \
                ${{github.event.inputs.install}} \
                1 \
                redis_${{github.event.inputs.version}}_ubuntu_${{matrix.os}}_amd64.deb
        shell: bash

      - name: Cache files
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_${{matrix.os}}_amd64.deb
          key: ${{github.sha}}-${{matrix.os}}-amd64

  build_arm64:
    needs: [check]
    if: ${{ github.event.inputs.temporary != 'false' || needs.check.outputs.needbuild == 0 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [16.04, 18.04, 20.04]

    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - uses: uraimo/run-on-arch-action@v2.5.0
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu${{matrix.os}}
          run: |
            uname -a
            bash ./script/redis.sh \
                ${{github.event.inputs.version}} \
                ${{github.event.inputs.install}} \
                1 \
                redis_${{github.event.inputs.version}}_ubuntu_${{matrix.os}}_arm64.deb

      - name: Cache files
        id: restore-build
        uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_${{matrix.os}}_arm64.deb
          key: ${{github.sha}}-${{matrix.os}}-arm64

  release:
    needs: [build_amd64, build_arm64]
    runs-on: ubuntu-latest
    outputs:
      count: ${{ steps.files.outputs.count }}

    steps:
      - name: Checkout
        timeout-minutes: 1
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_16.04_amd64.deb
          key: ${{github.sha}}-16.04-amd64
      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_18.04_amd64.deb
          key: ${{github.sha}}-18.04-amd64
      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_20.04_amd64.deb
          key: ${{github.sha}}-20.04-amd64
      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_16.04_arm64.deb
          key: ${{github.sha}}-16.04-arm64
      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_18.04_arm64.deb
          key: ${{github.sha}}-18.04-arm64
      - uses: actions/cache@v3
        with:
          path: ./redis_${{github.event.inputs.version}}_ubuntu_20.04_arm64.deb
          key: ${{github.sha}}-20.04-arm64

      - name: Files
        id: files
        run: |
          echo ${PWD}
          echo "::set-output name=count::$(ls|grep redis_${{github.event.inputs.version}}|wc -l)"
          ls -Al .

      - name: Release
        if: ${{ success() && steps.files.outputs.count == 6 && github.event.inputs.temporary == 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GIT_TOKEN }}
          file: ${{github.workspace}}/redis_${{github.event.inputs.version}}_*
          asset_name: redis_${{github.event.inputs.version}}
          tag: redis_${{github.event.inputs.version}}
          overwrite: true
          body: "release redis_${{github.event.inputs.version}} install in ${{github.event.inputs.install}}"
          file_glob: true

      - name: Upload amd64 temporary
        if: ${{ github.event.inputs.temporary != 'false' }}
        uses: actions/upload-artifact@v2
        with:
          name: redis_${{github.event.inputs.version}}_ubuntu_${{github.event.inputs.temporary}}_amd64
          path: ${{github.workspace}}/redis_${{github.event.inputs.version}}_ubuntu_${{github.event.inputs.temporary}}_amd64.deb
          retention-days: 1

      - name: Upload arm64 temporary
        if: ${{ github.event.inputs.temporary != 'false' }}
        uses: actions/upload-artifact@v2
        with:
          name: redis_${{github.event.inputs.version}}_ubuntu_${{github.event.inputs.temporary}}_arm64
          path: ${{github.workspace}}/redis_${{github.event.inputs.version}}_ubuntu_${{github.event.inputs.temporary}}_arm64.deb
          retention-days: 1
