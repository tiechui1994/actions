name: node
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'node version'
        required: true
        default: ''
      install:
        description: 'node install dir'
        required: false
        default: '/opt/local/node'
      temporary:
        description: 'temporary build system version'
        required: false
        default: ''
        type: choice
        options:
        - 'false'
        - '18.04'
        - '20.04'
        - '22.04'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needbuild: ${{ steps.checktag.outputs.needbuild }}

    steps:
    - name: Checkout
      timeout-minutes: 1
      uses: actions/checkout@v3
      with:
        persist-credentials: false
    - name: Check tag
      id: checktag
      run: bash script/checktag.sh ${{secrets.GIT_TOKEN}} node_${{github.event.inputs.version}}

  build_amd64:
    needs: [check]
    if: ${{ needs.check.outputs.needbuild == 0 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [18.04, 20.04, 22.04]

    steps:
    - name: Checkout
      timeout-minutes: 1
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Setup
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Build with ubuntu_${{matrix.os}}
      if: ${{ (github.event.inputs.temporary != 'false' && github.event.inputs.temporary == matrix.os) || (github.event.inputs.temporary == 'false' && needs.check.outputs.needbuild == 0) }}
      id: build
      run: |
        docker run -v ${PWD}:/app --workdir /app --platform "linux/amd64" ubuntu:${{matrix.os}} \
          bash /app/script/node.sh \
              ${{github.event.inputs.version}} \
              ${{github.event.inputs.install}} \
              1 \
              node-v${{github.event.inputs.version}}-${{matrix.os}}-linux-x64.tar.gz
      shell: bash

    - name: Cache files
      if: ${{ (github.event.inputs.temporary != 'false' && github.event.inputs.temporary == matrix.os) || (github.event.inputs.temporary == 'false' && needs.check.outputs.needbuild == 0) }}
      id: restore-build
      uses: actions/cache@v3
      with:
        path: ./node-v${{github.event.inputs.version}}-${{matrix.os}}-linux-x64.tar.gz
        key: ${{github.sha}}-${{matrix.os}}-amd64

  release:
    needs: [build_amd64]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      timeout-minutes: 1
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - uses: actions/cache@v3
      with:
        path: ./node-v${{github.event.inputs.version}}-18.04-linux-x64.tar.gz
        key: ${{github.sha}}-18.04-amd64
    - uses: actions/cache@v3
      with:
        path: ./node-v${{github.event.inputs.version}}-20.04-linux-x64.tar.gz
        key: ${{github.sha}}-20.04-amd64
    - uses: actions/cache@v3
      with:
        path: ./node-v${{github.event.inputs.version}}-22.04-linux-x64.tar.gz
        key: ${{github.sha}}-22.04-amd64

    - name: Release
      if: ${{ success() && github.event.inputs.temporary == 'false' }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GIT_TOKEN }}
        file: ${{github.workspace}}/node-v${{github.event.inputs.version}}-*
        asset_name: node_${{github.event.inputs.version}}
        tag: node_${{github.event.inputs.version}}
        overwrite: true
        body: "release node_${{github.event.inputs.version}}"
        file_glob: true

    - name: Upload amd64 temporary
      if: ${{ github.event.inputs.temporary != 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: node_${{github.event.inputs.version}}_${{github.event.inputs.temporary}}_amd64
        path: ${{github.workspace}}/node-v${{github.event.inputs.version}}-${{github.event.inputs.temporary}}-linux-x64.tar.gz
        retention-days: 1
